package scanners;

import java.util.HashMap;

/**
 * APDUStatusChecker
 * <p>
 * APDUStatusChecker is the lookup class that store error references in a simple mapping of error codes (generated during
 * APDU communication) to error descriptions.
 * </p>
 */
public class APDUStatusChecker {

    private static HashMap<String, String> DATABASE = new HashMap<String, String>();
    private static final String ERROR_UNKNOWN = "Unknown error";

    static {

        // Static error codes
        DATABASE.put("1000", "Card reader not present");
        DATABASE.put("1100", "License file not found");
        DATABASE.put("1200", "License not valid");
        DATABASE.put("1300", "Card not present");
        DATABASE.put("1400", "Unknown error");
        DATABASE.put("9000", "Successful command");
        DATABASE.put("6200", "Generic warning");
        DATABASE.put("6281", "Invalid or corrupted data");
        DATABASE.put("6282", "EOF reached");
        DATABASE.put("6283", "The selected file is invalid");
        DATABASE.put("6284", "Invalid File Control Information (FCI)");
        DATABASE.put("6300", "Generic error");
        DATABASE.put("6381", "File is full");
        DATABASE.put("63Cx", "Error meaning depends on the specific command");
        DATABASE.put("6400", "Command processing error");
        DATABASE.put("6500", "Generic error");
        DATABASE.put("6581", "Storing error");
        DATABASE.put("6700", "Invalid command length");
        DATABASE.put("6800", "(CLA) Command not supported");
        DATABASE.put("6881", "Channel not supported");
        DATABASE.put("6883", "Secure messaging mode not supported");
        DATABASE.put("6900", "Command not permitted");
        DATABASE.put("6981", "The command is incompatible with the file structure");
        DATABASE.put("6982", "Access denied (access permissions not granted)");
        DATABASE.put("6983", "Security object is blocked");
        DATABASE.put("6984", "Invalid command data");
        DATABASE.put("6985", "Use conditions unsatisfied");
        DATABASE.put("6986", "Invalid command: no file selected");
        DATABASE.put("6987", "Secure Messaging Object (SMO) not found");
        DATABASE.put("6988", "Checking error: Incorrect secure messaging data object");
        DATABASE.put("6888", "Invalid Secure Messaging Object (SMO)");
        DATABASE.put("6A00", "Wrong P1 or P2 field");
        DATABASE.put("6A80", "Wrong parameters in DATA field");
        DATABASE.put("6A81", "Unsupported function");
        DATABASE.put("6A82", "File not found");
        DATABASE.put("6A83", "Record not found");
        DATABASE.put("6A84", "Not enough free space on file or memory");
        DATABASE.put("6A85", "Inconsistent LC field with respect to TLV structure");
        DATABASE.put("6A86", "Wrong P1 or P2 field");
        DATABASE.put("6A87", "Inconsistent LC field with respect to P1 and P2 fields");
        DATABASE.put("6A88", "Object not found");
        DATABASE.put("6B00", "Wrong P1 or P2 field");
        DATABASE.put("6D00", "Invalid or not supported INS field");
        DATABASE.put("6E00", "Invalid or not supported CLA field");
        DATABASE.put("6F00", "Internal error");

        // Dynamic error codes
        DATABASE.put("61XX", "Successful command: %1$s APDU response bytes still available");
        DATABASE.put("6CXX", "Wrong LE field:  the correct size of APDU response's DATA field is %1$s bytes");
    }

    /**
     * checkError
     * <p>
     * checkError takes in the error code generated by APDUResponse and look up the error table for error description,
     * if available.
     * </p>
     *
     * @param errorCode is a number representing the error encountered
     * @return String
     * @throws Exception
     */
    public static String checkError(String errorCode) throws Exception {

        // Handles invalid error codes
        if (errorCode == null || errorCode.length() != 4) {

            // TODO: Logging

            throw new MatricCardScannerExceptions.InvalidErrorCodeException();
        }

        String errorMsg = ERROR_UNKNOWN;

        if (errorCode.startsWith("61") || errorCode.startsWith("6C")) {

            // Check for dynamic error codes
            errorMsg = DATABASE.get(errorCode.substring(0, 2) + "XX");
            errorMsg = String.format(errorMsg, errorCode.substring(3, 4));

        } else if (DATABASE.get(errorCode) != null) {

            // Check for static error codes
            errorMsg = DATABASE.get(errorCode);

        } else {
            errorMsg = ERROR_UNKNOWN;
        }

        // TODO: Logging

        return errorMsg;

    }
}
